		ParknShop online C2C platform development project
						Code Style
						
						last-modified:	2014-4-13
						
1. Database and SQL:

	1.1		use underscore rather than capital letter, 
			e.g. `time_created` not `timeCreated`
	
	1.2 	all entity start with `ps`, e.g. `ps_item`
	
	1.3 	table that recored relationship of two tables starts with 'r', e.g. `r_tag_item`
	
	1.4		prefer Hungarian Notation, that is, the name of a field leads with its type,
			e.g., 'id_customer' rather than 'customer_id', 
					'time_created' rather than 'created_time'.
					
	1.5		when record a time point, use timestamp, not datatime,
			string variable, by default, is varchar(45)
			the primary key, i.e, 'id', is a 32-bit unsigned, auto-increased integer
	
	1.6		'unique' property is not recommended for a field;
			'unsigned' property is not recommended for a field(except for primary key);
			'blob', 'clob', is not recommended, if large binary/text object needs to be 
			stored, consider something else
	
	1.7		Special database features(out of SQL standard) are not recommended.
	
	
2. Object/Relation Mapping:

	2.1		it is recommended that name of the member variable of a Java Object  
			be the same as the name of the correspondent filed of the table in the DB schema
	
	2.2		database data type ----> java data type	:
				varchar			->		java.lang.String	(trim before use)
				char[n]			->		java.lang.String	(trim before use)
				timestamp		->		java.sql.Date		(not java.util.Date)
				date			->		java.sql.Date		(not java.util.Date)
				int1			->		boolean or java.lang.Boolean
				smallint		->		int	(or some enume)
				tinyint			->		int	(or some enum)
	
	2.3		using annotations for Hibernate configuration.
			a model must: 
						is serializable,
						has an explicit/inexplicit  public trivial constructor
						has override hashCode() and equals,
						has appropriate getters and setters.
			a field must be appropriately annotated
			example:
			
			@Entity
			@Table(name="ps_book")
			public class Book implements Serializable {
					private static final long serialVersionUID = 4127502969316749420L;
	
				@Id
				@GeneratedValue(strategy=GenerationType.IDENTITY)
				private int 			id;
				
				@Column
				private String 			name;
				
				@Column(name="time_created")
				private java.sql.Date	timeCreated;
				
				// hashCode(), equals
				// getter, setter
			}

	2.4 	Do not change DB generated value.
			i.e., primary key, timestamp that is auto generated by databas

	2.5		Data Access Object name conventions:
			interface name is defined as IDAOXyz, e.g. 'IDAOUser'
				and they are put into package '*.dao'
			DAO implementation is named as DAOXxx, 'DAOUser'
				and they are put into package '*.dao.impl'
				
			DAO 'get' method name convention:
			get object/objecs with parameter such that the parameter is one field of Xxx, 
			use 'By' clause e.g.	
				List<FC_Tag>	getTagsByName(String name);
				User getById(int id);

			get object/objecs with parameter such that the parameter is not any field of Xxx(likely a entity 
		 		related to Xxx), use 'Of' clause
			e.g.
				List<FC_Post>	getPostsOfTag(int tagId);
		
			get object/objecs with parameter such that the parameter is of time type, use 'on' clause
			e.g.
				List<FC_Transaction> getTransactionsOnDate(java.sql.Date date);
	
			If the given parameter is not the unique field of this Object(i.e. not the id)
			returns a List, even if there is one and one only element in this list
			e.g.
				List<FC_User> 	getUsersByName(String name);// login name, unique
				
			when return type is a list, user suffix 's'
				getXxxsByYyy or getXxxsOfYyy
			e.g.	  ^				  ^
				List<FC_Post>	getPostsOfTag(int tagId);
									   ^
			Otherwise do not add 's' or 'es'.		


3. Java Code Style

	3.1		use sun Java code convention.
	
	3.2		abbreviations are not recommend and shall be avoided,
				especially in interfaces.
	3.3		prefer Hungarian Notation, that is, the name of a field leads with its type,
			e.g., 'time_created' rather than 'created_time'.
	
	3.4		when designing an interface, consider the following:
			1) method name, name should be straight forward 
				and indicate its function.
			2) return type
			3) arguments
			4) for each argument, consider: is it nullable? is it not-null ? what range may it be?
			5) for return value: is it nullable? is it not-null ? what range may it be?
			6) will this method throw eceptions? if so, what kind of exception it may throw? and when?
			7) annotations	
	
	3.5		Generics. generic type must be written
			e.g., HashMap<String, Pair<String, Date>> map = new HashMap<String, Pair<String, Date>>();
				 not HashMap<String, Pair<String, Date>> map = new HashMap<?,?>();
				   or HashMap<String, Pair<String, Date>> map = new HashMap();
				   
			please enable Java Compiler warning in your Java IDE(MyEclipse).
	
	3.6 	write your name in the comment if you have created/modified a class
			